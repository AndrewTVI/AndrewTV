name: Update latest social posts

on:
  schedule:
    - cron: '*/30 * * * *'       # cada 30 minutos
  workflow_dispatch: {}           # ejecución manual desde Actions

permissions:
  contents: write                 # necesario para poder commitear al repo

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch latest TikTok & Tweet (RSS primero, robusto, solo propios)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data

          # jq/curl ya vienen, pero por si acaso:
          sudo apt-get update -y
          sudo apt-get install -y jq curl

          json_get() {
            # Devuelve {} si hay error (500, etc) para que jq no truene
            curl -fsSL "$1" || echo '{}'
          }

          ######### TIKTOK #########
          # 1) RSS preferido (si falla, TT_JSON = {})
          TT_JSON="$(json_get 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frsshub.app%2Ftiktok%2Fuser%2Fandrewtvi')"
          TIKTOK="$(echo "$TT_JSON" | jq -r '
            if (.items|type=="array" and (.items|length)>0 and (.items[0].link|type=="string"))
              then .items[0].link
              else empty
            end
          ')"

          # 2) Fallback: scrape (r.jina.ai)
          if [ -z "$TIKTOK" ]; then
            RAW_TT="$(curl -fsSL 'https://r.jina.ai/http://www.tiktok.com/@andrewtvi' || true)"
            TIKTOK="$(printf '%s' "$RAW_TT" \
              | grep -oEi 'https://www\.tiktok\.com/@andrewtvi/video/[0-9]+' \
              | head -n1 || true)"
          fi

          ######### TWITTER/X (solo TUS tweets, no RT/likes) #########
          USER_RX='iAndres_Soto'

          # 1) RSS via Nitter → filtramos:
          #    - link de tu usuario /<user>/status/...
          #    - título que NO empiece con RT @
          #    - título que NO mencione like/liked/likes/replying/replied
          TW_JSON="$(json_get 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Fnitter.net%2Fiandres_soto%2Frss')"
          TWEET="$(echo "$TW_JSON" | jq -r '
            if (.items|type=="array") then
              ( [ .items[]
                  | select(.link|type=="string" and (.link|test("/'"$USER_RX"'/status/"; "i")))
                  | select(.title|type=="string")
                  | select((.title|test("^RT @"; "i")|not) and (.title|test("(^|\\b)(like|liked|likes|replying to|replied to)\\b"; "i")|not))
                ] | if length>0 then .[0].link else empty end )
            else empty end
          ')"

          # Normaliza nitter → twitter
          if [ -n "${TWEET:-}" ]; then
            TWEET="$(printf '%s' "$TWEET" \
              | sed -E 's#^https?://nitter\.net/#https://twitter.com/#I')"
          fi

          # 2) Fallback: scrape (x.com / twitter.com) SOLO de tu usuario
          if [ -z "${TWEET:-}" ]; then
            RAW_X="$(curl -fsSL 'https://r.jina.ai/http://x.com/iAndres_Soto' || true)"
            RAW_TW="$(curl -fsSL 'https://r.jina.ai/http://twitter.com/iAndres_Soto' || true)"
            RAW_ALL="${RAW_X}
${RAW_TW}"

            ALL_SELF="$(printf '%s' "$RAW_ALL" \
              | grep -oEi 'https?://(x\.com|twitter\.com)/'"$USER_RX"'/status/[0-9]+' \
              | sed -E 's#^https?://x\.com/#https://twitter.com/#I' \
              | sort -u)"

            # Tomamos el primero (más arriba en el HTML ~ más reciente)
            TWEET="$(echo "$ALL_SELF" | sed -n '1p' || true)"
          fi

          echo "TIKTOK: $TIKTOK"
          echo "TWEET : $TWEET"

          # Generar JSON (aunque alguno venga vacío)
          TIKTOK_SAFE=${TIKTOK//\"/\\\"}
          TWEET_SAFE=${TWEET//\"/\\\"}
          printf '{ "tiktok": "%s", "tweet": "%s" }\n' "$TIKTOK_SAFE" "$TWEET_SAFE" > data/latest.json

          echo "latest.json:"
          cat data/latest.json


      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update latest.json"
          file_pattern: data/latest.json
