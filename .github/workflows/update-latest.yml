name: Update latest social posts

on:
  schedule:
    - cron: '*/30 * * * *'        # cada 30 minutos
  workflow_dispatch: {}            # permite ejecutarlo a mano desde Actions

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch latest TikTok & Tweet (sin API, estable)
        shell: bash
        run: |
          # No usamos -e para que algún 422/500 no rompa el job
          set -uo pipefail
          mkdir -p data

          # === CONFIG ===
          TT_USER='andrewtvi'       # tu usuario en TikTok (sin @)
          TW_USER='iAndres_Soto'    # tu usuario en X/Twitter (sin @)

          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq curl >/dev/null

          # Helper: descarga JSON con reintentos (si falla, devuelve {})
          json_get () {
            local url="$1"
            curl -sSL --retry 2 --retry-delay 1 --fail "$url" 2>/dev/null || printf '{}'
          }

          ##### TIKTOK (RSS -> fallback scrape)
          TT_JSON="$(json_get "https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frsshub.app%2Ftiktok%2Fuser%2F${TT_USER}")"
          TIKTOK="$(echo "$TT_JSON" | jq -r '
            if (.items|type=="array" and (.items|length)>0 and (.items[0].link|type=="string"))
              then .items[0].link else empty end
          ' 2>/dev/null || printf '')"

          # Fallback: scrapping del HTML via r.jina.ai (toma el primer video propio)
          if [ -z "$TIKTOK" ]; then
            RAW_TT="$(curl -sSL "https://r.jina.ai/http://www.tiktok.com/@${TT_USER}" 2>/dev/null || true)"
            TIKTOK="$(printf '%s' "$RAW_TT" \
              | grep -oE "https://www\.tiktok\.com/@${TT_USER}/video/[0-9]+" \
              | head -n1 || true)"
          fi

          ##### TWITTER / X (último tweet propio, sin RT)
          # Pedimos la página estática via r.jina.ai y extraemos el primer status del propio usuario
          RAW_TW="$(curl -sSL "https://r.jina.ai/http://x.com/${TW_USER}" 2>/dev/null || true)"
          TWEET_URL="$(printf '%s' "$RAW_TW" \
            | grep -oE "https://(x|twitter)\.com/${TW_USER}/status/[0-9]+" \
            | head -n1 || true)"

          # Normaliza dominio x.com -> twitter.com
          if [ -n "${TWEET_URL:-}" ]; then
            TWEET="${TWEET_URL//https:\/\/x.com/https:\/\/twitter.com}"
          else
            TWEET=""
          fi

          # === Salida y guardado en JSON (escapando comillas) ===
          echo "TIKTOK: ${TIKTOK:-<vacío>}"
          echo "TWEET : ${TWEET:-<vacío>}"

          TIKTOK_SAFE=${TIKTOK//\"/\\\"}
          TWEET_SAFE=${TWEET//\"/\\\"}
          printf '{ "tiktok": "%s", "tweet": "%s" }\n' "$TIKTOK_SAFE" "$TWEET_SAFE" > data/latest.json

          echo "latest.json:"
          cat data/latest.json

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update latest.json"
          file_pattern: data/latest.json
